generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ApiEndpoint {
  id                   BigInt                @id @default(autoincrement())
  apiSlotId            BigInt                @map("api_slot_id")
  path                 String?               @db.VarChar
  method               String?               @db.VarChar
  commands             String?
  caching              Boolean?              @default(false)
  createdAt            DateTime              @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt            DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  apiSlot              ApiSlot               @relation(fields: [apiSlotId], references: [id])
  compiledApiEndpoints CompiledApiEndpoint[]

  @@map("api_endpoints")
}

model ApiEnvVar {
  id        BigInt  @id @default(autoincrement())
  apiSlotId BigInt  @map("api_slot_id")
  name      String? @db.VarChar
  value     String? @db.VarChar
  className String? @map("class_name") @db.VarChar
  apiSlot   ApiSlot @relation(fields: [apiSlotId], references: [id])

  @@map("api_env_vars")
}

model ApiError {
  id        BigInt  @id @default(autoincrement())
  apiSlotId BigInt  @map("api_slot_id")
  code      Int?
  message   String? @db.VarChar
  apiSlot   ApiSlot @relation(fields: [apiSlotId], references: [id])

  @@map("api_errors")
}

model ApiFunction {
  id        BigInt   @id @default(autoincrement())
  apiSlotId BigInt   @map("api_slot_id")
  name      String?  @db.VarChar
  params    String?  @db.VarChar
  commands  String?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  apiSlot   ApiSlot  @relation(fields: [apiSlotId], references: [id])

  @@map("api_functions")
}

model ApiSlot {
  id            BigInt        @id @default(autoincrement())
  apiId         BigInt        @map("api_id")
  name          String?       @db.VarChar
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  documentation String?
  apiEndpoints  ApiEndpoint[]
  apiEnvVars    ApiEnvVar[]
  apiErrors     ApiError[]
  apiFunctions  ApiFunction[]
  api           Api           @relation(fields: [apiId], references: [id])

  @@map("api_slots")
}

model Api {
  id        BigInt    @id @default(autoincrement())
  appId     BigInt    @map("app_id")
  name      String?   @db.VarChar
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  apiSlots  ApiSlot[]
  app       App       @relation(fields: [appId], references: [id])

  @@map("apis")
}

model AppUserSnapshot {
  id               BigInt    @id @default(autoincrement())
  appId            BigInt    @map("app_id")
  time             DateTime? @db.Timestamp(6)
  dailyActive      Int?      @default(0) @map("daily_active")
  monthlyActive    Int?      @default(0) @map("monthly_active")
  yearlyActive     Int?      @default(0) @map("yearly_active")
  weeklyActive     Int?      @default(0) @map("weekly_active")
  freePlan         Int?      @default(0) @map("free_plan")
  plusPlan         Int?      @default(0) @map("plus_plan")
  proPlan          Int?      @default(0) @map("pro_plan")
  emailConfirmed   Int?      @default(0) @map("email_confirmed")
  emailUnconfirmed Int?      @default(0) @map("email_unconfirmed")
  app              App       @relation(fields: [appId], references: [id])

  @@map("app_user_snapshots")
}

model AppUser {
  id          BigInt    @id @default(autoincrement())
  userId      BigInt    @map("user_id")
  appId       BigInt    @map("app_id")
  usedStorage BigInt?   @default(0) @map("used_storage")
  lastActive  DateTime? @map("last_active") @db.Timestamp(6)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  app         App       @relation(fields: [appId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@map("app_users")
}

model App {
  id                   BigInt                @id @default(autoincrement())
  devId                BigInt                @map("dev_id")
  name                 String?               @db.VarChar
  description          String?               @db.VarChar
  published            Boolean?              @default(false)
  webLink              String?               @map("web_link") @db.VarChar
  googlePlayLink       String?               @map("google_play_link") @db.VarChar
  microsoftStoreLink   String?               @map("microsoft_store_link") @db.VarChar
  createdAt            DateTime              @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt            DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  webhookUrl           String?               @map("webhook_url") @db.VarChar
  apis                 Api[]
  appUserSnapshots     AppUserSnapshot[]
  appUsers             AppUser[]
  dev                  Dev                   @relation(fields: [devId], references: [id])
  notifications        Notification[]
  sessions             Session[]
  tables               Table[]
  websocketConnections WebsocketConnection[]

  @@map("apps")
}

model ar_internal_metadata {
  key        String   @id @db.VarChar
  value      String?  @db.VarChar
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)

  @@ignore
}

model Collection {
  id                       BigInt                  @id @default(autoincrement())
  tableId                  BigInt                  @map("table_id")
  name                     String?                 @db.VarChar
  createdAt                DateTime                @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                DateTime                @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  table                    Table                   @relation(fields: [tableId], references: [id])
  table_object_collections TableObjectCollection[]

  @@map("collections")
}

model CompiledApiEndpoint {
  id            BigInt      @id @default(autoincrement())
  apiEndpointId BigInt      @map("api_endpoint_id")
  code          String?
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  apiEndpoint   ApiEndpoint @relation(fields: [apiEndpointId], references: [id])

  @@map("compiled_api_endpoints")
}

model Dev {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt   @map("user_id")
  apiKey    String?  @map("api_key") @db.VarChar
  secretKey String?  @map("secret_key") @db.VarChar
  uuid      String?  @db.VarChar
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  apps      App[]
  user      User     @relation(fields: [userId], references: [id])

  @@map("devs")
}

model Notification {
  id        BigInt    @id @default(autoincrement())
  userId    BigInt    @map("user_id")
  appId     BigInt    @map("app_id")
  uuid      String?   @unique(map: "index_notifications_on_uuid") @db.VarChar
  time      DateTime? @db.Timestamp(6)
  interval  Int?
  title     String?   @db.VarChar
  body      String?   @db.VarChar
  icon      String?   @db.VarChar
  image     String?   @db.VarChar
  href      String?   @db.VarChar
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  app       App       @relation(fields: [appId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Provider {
  id              BigInt   @id @default(autoincrement())
  userId          BigInt   @map("user_id")
  stripeAccountId String?  @map("stripe_account_id") @db.VarChar
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  user            User     @relation(fields: [userId], references: [id])

  @@map("providers")
}

model Purchase {
  id                   BigInt                @id @default(autoincrement())
  userId               BigInt                @map("user_id")
  paymentIntentId      String?               @map("payment_intent_id") @db.VarChar
  providerName         String?               @map("provider_name") @db.VarChar
  providerImage        String?               @map("provider_image") @db.VarChar
  productName          String?               @map("product_name") @db.VarChar
  productImage         String?               @map("product_image") @db.VarChar
  price                Int?
  currency             String?               @db.VarChar
  completed            Boolean?              @default(false)
  createdAt            DateTime              @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt            DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  uuid                 String?               @unique(map: "index_purchases_on_uuid") @db.VarChar
  user                 User                  @relation(fields: [userId], references: [id])
  tableObjectPurchases TableObjectPurchase[]

  @@map("purchases")
}

model RedisTableObjectOperation {
  id              BigInt   @id @default(autoincrement())
  tableObjectUuid String?  @map("table_object_uuid") @db.VarChar
  operation       String?  @db.VarChar
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("redis_table_object_operations")
}

model schema_migrations {
  version String @id @db.VarChar

  @@ignore
}

model Session {
  id                   BigInt                @id @default(autoincrement())
  userId               BigInt                @map("user_id")
  appId                BigInt                @map("app_id")
  token                String?               @unique(map: "index_sessions_on_token") @db.VarChar
  oldToken             String?               @unique(map: "index_sessions_on_old_token") @map("old_token") @db.VarChar
  deviceName           String?               @map("device_name") @db.VarChar
  deviceOs             String?               @map("device_os") @db.VarChar
  createdAt            DateTime              @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt            DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  app                  App                   @relation(fields: [appId], references: [id])
  user                 User                  @relation(fields: [userId], references: [id])
  webPushSubscriptions WebPushSubscription[]

  @@map("sessions")
}

model TableEtag {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt   @map("user_id")
  tableId   BigInt   @map("table_id")
  etag      String?  @db.VarChar
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  table     Table    @relation(fields: [tableId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("table_etags")
}

model TableObjectCollection {
  id            BigInt      @id @default(autoincrement())
  tableObjectId BigInt      @map("table_object_id")
  collectionId  BigInt      @map("collection_id")
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamp(6)
  collection    Collection  @relation(fields: [collectionId], references: [id])
  table_object  TableObject @relation(fields: [tableObjectId], references: [id])

  @@map("table_object_collections")
}

model TableObjectPrice {
  id            BigInt      @id @default(autoincrement())
  tableObjectId BigInt      @map("table_object_id")
  price         Int         @default(0)
  currency      String      @default("EUR") @db.VarChar
  type          String      @default("PURCHASE") @map("mode")
  tableObject   TableObject @relation(fields: [tableObjectId], references: [id])

  @@map("table_object_prices")
}

model TableObjectProperty {
  id            BigInt      @id @default(autoincrement())
  tableObjectId BigInt      @map("table_object_id")
  name          String?     @db.VarChar
  value         String?
  tableObject   TableObject @relation(fields: [tableObjectId], references: [id])

  @@map("table_object_properties")
}

model TableObjectPurchase {
  id            BigInt      @id @default(autoincrement())
  tableObjectId BigInt      @map("table_object_id")
  purchaseId    BigInt      @map("purchase_id")
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamp(6)
  purchase      Purchase    @relation(fields: [purchaseId], references: [id])
  tableObject   TableObject @relation(fields: [tableObjectId], references: [id])

  @@map("table_object_purchases")
}

model TableObjectUserAccess {
  id            BigInt      @id @default(autoincrement())
  userId        BigInt      @map("user_id")
  tableObjectId BigInt      @map("table_object_id")
  tableAlias    BigInt?     @map("table_alias")
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamp(6)
  table         Table?      @relation(fields: [tableAlias], references: [id])
  tableObject   TableObject @relation(fields: [tableObjectId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@map("table_object_user_accesses")
}

model TableObject {
  id                      BigInt                  @id @default(autoincrement())
  userId                  BigInt                  @map("user_id")
  tableId                 BigInt                  @map("table_id")
  uuid                    String?                 @unique(map: "index_table_objects_on_uuid") @db.VarChar
  file                    Boolean?                @default(false)
  etag                    String?                 @db.VarChar
  createdAt               DateTime                @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt               DateTime                @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  tableObjectCollections  TableObjectCollection[]
  tableObjectPrices       TableObjectPrice[]
  tableObjectProperties   TableObjectProperty[]
  tableObjectPurchases    TableObjectPurchase[]
  tableObjectUserAccesses TableObjectUserAccess[]
  table                   Table                   @relation(fields: [tableId], references: [id])
  user                    User                    @relation(fields: [userId], references: [id])
  orders                  Order[]

  @@map("table_objects")
}

model TablePropertyType {
  id       BigInt  @id @default(autoincrement())
  tableId  BigInt  @map("table_id")
  name     String? @db.VarChar
  dataType Int?    @default(0) @map("data_type")
  table    Table   @relation(fields: [tableId], references: [id])

  @@map("table_property_types")
}

model Table {
  id                      BigInt                  @id @default(autoincrement())
  appId                   BigInt                  @map("app_id")
  name                    String?                 @db.VarChar
  createdAt               DateTime                @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt               DateTime                @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  cdn                     Boolean?                @default(false)
  ignoreFileSize          Boolean?                @default(false) @map("ignore_file_size")
  collections             Collection[]
  tableEtags              TableEtag[]
  tableObjectUserAccesses TableObjectUserAccess[]
  tableObjects            TableObject[]
  tablePropertyTypes      TablePropertyType[]
  app                     App                     @relation(fields: [appId], references: [id])

  @@map("tables")
}

model UserProfileImage {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt   @map("user_id")
  ext       String?  @db.VarChar
  mimeType  String?  @map("mime_type") @db.VarChar
  etag      String?  @db.VarChar
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  user      User     @relation(fields: [userId], references: [id])

  @@map("user_profile_images")
}

model UserSnapshot {
  id               BigInt    @id @default(autoincrement())
  time             DateTime? @db.Timestamp(6)
  dailyActive      Int?      @default(0) @map("daily_active")
  monthlyActive    Int?      @default(0) @map("monthly_active")
  yearlyActive     Int?      @default(0) @map("yearly_active")
  weeklyActive     Int?      @default(0) @map("weekly_active")
  freePlan         Int?      @default(0) @map("free_plan")
  plusPlan         Int?      @default(0) @map("plus_plan")
  proPlan          Int?      @default(0) @map("pro_plan")
  emailConfirmed   Int?      @default(0) @map("email_confirmed")
  emailUnconfirmed Int?      @default(0) @map("email_unconfirmed")

  @@map("user_snapshots")
}

model User {
  id                        BigInt                  @id @default(autoincrement())
  email                     String?                 @db.VarChar
  firstName                 String?                 @map("first_name") @db.VarChar
  password                  String?                 @map("password_digest") @db.VarChar
  confirmed                 Boolean?                @default(false)
  emailConfirmationToken    String?                 @map("email_confirmation_token") @db.VarChar
  passwordConfirmationToken String?                 @map("password_confirmation_token") @db.VarChar
  oldEmail                  String?                 @map("old_email") @db.VarChar
  newEmail                  String?                 @map("new_email") @db.VarChar
  newPassword               String?                 @map("new_password") @db.VarChar
  usedStorage               BigInt?                 @default(0) @map("used_storage")
  lastActive                DateTime?               @map("last_active") @db.Timestamp(6)
  stripeCustomerId          String?                 @map("stripe_customer_id") @db.VarChar
  plan                      Int?                    @default(0)
  subscriptionStatus        Int?                    @default(0) @map("subscription_status")
  periodEnd                 DateTime?               @map("period_end") @db.Timestamp(6)
  createdAt                 DateTime                @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                 DateTime                @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  appUsers                  AppUser[]
  devs                      Dev[]
  notifications             Notification[]
  providers                 Provider[]
  purchases                 Purchase[]
  sessions                  Session[]
  tableEtags                TableEtag[]
  tableObjectUserAccesses   TableObjectUserAccess[]
  tableObjects              TableObject[]
  userProfileImages         UserProfileImage[]
  websocketConnections      WebsocketConnection[]
  orders                    Order[]
  shippingAddresses         ShippingAddress[]

  @@map("users")
}

model WebPushSubscription {
  id        BigInt   @id @default(autoincrement())
  sessionId BigInt   @map("session_id")
  uuid      String?  @unique(map: "index_web_push_subscriptions_on_uuid") @db.VarChar
  endpoint  String?
  p256dh    String?  @db.VarChar
  auth      String?  @db.VarChar
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("web_push_subscriptions")
}

model WebsocketConnection {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt   @map("user_id")
  appId     BigInt   @map("app_id")
  token     String   @db.VarChar
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  app       App      @relation(fields: [appId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("websocket_connections")
}

model Order {
  id                BigInt           @id @default(autoincrement())
  uuid              String           @unique @default(uuid()) @db.VarChar
  userId            BigInt           @map("user_id")
  tableObjectId     BigInt           @map("table_object_id")
  shippingAddressId BigInt?          @map("shipping_address_id")
  paymentIntentId   String?          @map("payment_intent_id") @db.VarChar
  price             Int?
  currency          String?          @db.VarChar
  status            String?          @default("CREATED")
  createdAt         DateTime         @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  user              User             @relation(fields: [userId], references: [id])
  tableObject       TableObject      @relation(fields: [tableObjectId], references: [id])
  shippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id])

  @@map("orders")
}

model ShippingAddress {
  id         BigInt   @id @default(autoincrement())
  uuid       String   @unique @default(uuid()) @db.VarChar
  userId     BigInt   @map("user_id")
  name       String?  @db.VarChar
  email      String?  @db.VarChar
  phone      String?  @db.VarChar
  city       String?  @db.VarChar
  country    String?  @db.VarChar
  line1      String?  @db.VarChar
  line2      String?  @db.VarChar
  postalCode String?  @map("postal_code") @db.VarChar
  state      String?  @db.VarChar
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  user       User     @relation(fields: [userId], references: [id])
  orders     Order[]

  @@map("shipping_addresses")
}
