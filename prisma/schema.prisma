generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ApiEndpoint {
  id                     BigInt                @id @default(autoincrement())
  api_slot               ApiSlot               @relation(fields: [api_slot_id], references: [id])
  api_slot_id            BigInt
  path                   String?               @db.VarChar
  method                 String?               @db.VarChar
  commands               String?
  caching                Boolean?              @default(false)
  created_at             DateTime              @db.Timestamp(6)
  updated_at             DateTime              @db.Timestamp(6)
  compiled_api_endpoints CompiledApiEndpoint[]

  @@map("api_endpoints")
}

model ApiEnvVar {
  id          BigInt  @id @default(autoincrement())
  api_slot    ApiSlot @relation(fields: [api_slot_id], references: [id])
  api_slot_id BigInt
  name        String? @db.VarChar
  value       String? @db.VarChar
  class_name  String? @db.VarChar

  @@map("api_env_vars")
}

model ApiError {
  id          BigInt  @id @default(autoincrement())
  api_slot    ApiSlot @relation(fields: [api_slot_id], references: [id])
  api_slot_id BigInt
  code        Int?
  message     String? @db.VarChar

  @@map("api_errors")
}

model ApiFunction {
  id          BigInt   @id @default(autoincrement())
  api_slot    ApiSlot  @relation(fields: [api_slot_id], references: [id])
  api_slot_id BigInt
  name        String?  @db.VarChar
  params      String?  @db.VarChar
  commands    String?
  created_at  DateTime @db.Timestamp(6)
  updated_at  DateTime @db.Timestamp(6)

  @@map("api_functions")
}

model ApiSlot {
  id            BigInt        @id @default(autoincrement())
  api           Api           @relation(fields: [api_id], references: [id])
  api_id        BigInt
  name          String?       @db.VarChar
  created_at    DateTime      @db.Timestamp(6)
  updated_at    DateTime      @db.Timestamp(6)
  documentation String?
  api_endpoints ApiEndpoint[]
  api_functions ApiFunction[]
  api_errors    ApiError[]
  api_env_vars  ApiEnvVar[]

  @@map("api_slots")
}

model Api {
  id         BigInt    @id @default(autoincrement())
  app        App       @relation(fields: [app_id], references: [id])
  app_id     BigInt
  name       String?   @db.VarChar
  created_at DateTime  @db.Timestamp(6)
  updated_at DateTime  @db.Timestamp(6)
  api_slots  ApiSlot[]

  @@map("apis")
}

model AppUserSnapshot {
  id                BigInt    @id @default(autoincrement())
  app               App       @relation(fields: [app_id], references: [id])
  app_id            BigInt
  time              DateTime? @db.Timestamp(6)
  daily_active      Int?      @default(0)
  monthly_active    Int?      @default(0)
  yearly_active     Int?      @default(0)
  weekly_active     Int?      @default(0)
  free_plan         Int?      @default(0)
  plus_plan         Int?      @default(0)
  pro_plan          Int?      @default(0)
  email_confirmed   Int?      @default(0)
  email_unconfirmed Int?      @default(0)

  @@map("app_user_snapshots")
}

model AppUser {
  id           BigInt    @id @default(autoincrement())
  user         User      @relation(fields: [user_id], references: [id])
  user_id      BigInt
  app          App       @relation(fields: [app_id], references: [id])
  app_id       BigInt
  used_storage BigInt?   @default(0)
  last_active  DateTime? @db.Timestamp(6)
  created_at   DateTime  @db.Timestamp(6)
  updated_at   DateTime  @db.Timestamp(6)

  @@map("app_users")
}

model App {
  id                    BigInt                @id @default(autoincrement())
  dev                   Dev                   @relation(fields: [dev_id], references: [id])
  dev_id                BigInt
  name                  String?               @db.VarChar
  description           String?               @db.VarChar
  published             Boolean?              @default(false)
  web_link              String?               @db.VarChar
  google_play_link      String?               @db.VarChar
  microsoft_store_link  String?               @db.VarChar
  created_at            DateTime              @db.Timestamp(6)
  updated_at            DateTime              @db.Timestamp(6)
  apis                  Api[]
  app_users             AppUser[]
  app_user_snapshots    AppUserSnapshot[]
  tables                Table[]
  notifications         Notification[]
  sessions              Session[]
  websocket_connections WebsocketConnection[]

  @@map("apps")
}

model ar_internal_metadata {
  key        String   @id @db.VarChar
  value      String?  @db.VarChar
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)

  @@ignore
}

model Collection {
  id                       BigInt                  @id @default(autoincrement())
  table                    Table                   @relation(fields: [table_id], references: [id])
  table_id                 BigInt
  name                     String?                 @db.VarChar
  created_at               DateTime                @db.Timestamp(6)
  updated_at               DateTime                @db.Timestamp(6)
  table_object_collections TableObjectCollection[]

  @@map("collections")
}

model CompiledApiEndpoint {
  id              BigInt      @id @default(autoincrement())
  api_endpoint    ApiEndpoint @relation(fields: [api_endpoint_id], references: [id])
  api_endpoint_id BigInt
  code            String?
  created_at      DateTime    @db.Timestamp(6)
  updated_at      DateTime    @db.Timestamp(6)

  @@map("compiled_api_endpoints")
}

model Dev {
  id         BigInt   @id @default(autoincrement())
  user       User     @relation(fields: [user_id], references: [id])
  user_id    BigInt
  api_key    String?  @db.VarChar
  secret_key String?  @db.VarChar
  uuid       String?  @db.VarChar
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
  apps       App[]

  @@map("devs")
}

model Notification {
  id         BigInt    @id @default(autoincrement())
  user       User      @relation(fields: [user_id], references: [id])
  user_id    BigInt
  app        App       @relation(fields: [app_id], references: [id])
  app_id     BigInt
  uuid       String?   @unique(map: "index_notifications_on_uuid") @db.VarChar
  time       DateTime? @db.Timestamp(6)
  interval   Int?
  title      String?   @db.VarChar
  body       String?   @db.VarChar
  created_at DateTime  @db.Timestamp(6)
  updated_at DateTime  @db.Timestamp(6)

  @@map("notifications")
}

model Provider {
  id                BigInt   @id @default(autoincrement())
  user              User     @relation(fields: [user_id], references: [id])
  user_id           BigInt
  stripe_account_id String?  @db.VarChar
  created_at        DateTime @db.Timestamp(6)
  updated_at        DateTime @db.Timestamp(6)

  @@map("providers")
}

model Purchase {
  id                     BigInt                @id @default(autoincrement())
  user                   User                  @relation(fields: [user_id], references: [id])
  user_id                BigInt
  payment_intent_id      String?               @db.VarChar
  provider_name          String?               @db.VarChar
  provider_image         String?               @db.VarChar
  product_name           String?               @db.VarChar
  product_image          String?               @db.VarChar
  price                  Int?
  currency               String?               @db.VarChar
  completed              Boolean?              @default(false)
  created_at             DateTime              @db.Timestamp(6)
  updated_at             DateTime              @db.Timestamp(6)
  uuid                   String?               @unique(map: "index_purchases_on_uuid") @db.VarChar
  table_object_purchases TableObjectPurchase[]

  @@map("purchases")
}

model RedisTableObjectOperation {
  id                BigInt   @id @default(autoincrement())
  table_object_uuid String?  @db.VarChar
  operation         String?  @db.VarChar
  created_at        DateTime @db.Timestamp(6)
  updated_at        DateTime @db.Timestamp(6)

  @@map("redis_table_object_operations")
}

model schema_migrations {
  version String @id @db.VarChar

  @@ignore
}

model Session {
  id                     BigInt                @id @default(autoincrement())
  user                   User                  @relation(fields: [user_id], references: [id])
  user_id                BigInt
  app                    App                   @relation(fields: [app_id], references: [id])
  app_id                 BigInt
  token                  String?               @unique(map: "index_sessions_on_token") @db.VarChar
  old_token              String?               @unique(map: "index_sessions_on_old_token") @db.VarChar
  device_name            String?               @db.VarChar
  device_os              String?               @db.VarChar
  created_at             DateTime              @db.Timestamp(6)
  updated_at             DateTime              @db.Timestamp(6)
  web_push_subscriptions WebPushSubscription[]

  @@map("sessions")
}

model TableEtag {
  id         BigInt   @id @default(autoincrement())
  user       User     @relation(fields: [user_id], references: [id])
  user_id    BigInt
  table      Table    @relation(fields: [table_id], references: [id])
  table_id   BigInt
  etag       String?  @db.VarChar
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)

  @@map("table_etags")
}

model TableObjectCollection {
  id              BigInt      @id @default(autoincrement())
  table_object    TableObject @relation(fields: [table_object_id], references: [id])
  table_object_id BigInt
  collection      Collection  @relation(fields: [collection_id], references: [id])
  collection_id   BigInt
  created_at      DateTime    @db.Timestamp(6)

  @@map("table_object_collections")
}

model TableObjectPrice {
  id              BigInt      @id @default(autoincrement())
  table_object    TableObject @relation(fields: [table_object_id], references: [id])
  table_object_id BigInt
  price           Int?        @default(0)
  currency        String?     @default("eur") @db.VarChar

  @@map("table_object_prices")
}

model TableObjectProperty {
  id              BigInt      @id @default(autoincrement())
  table_object    TableObject @relation(fields: [table_object_id], references: [id])
  table_object_id BigInt
  name            String?     @db.VarChar
  value           String?

  @@map("table_object_properties")
}

model TableObjectPurchase {
  id              BigInt      @id @default(autoincrement())
  table_object    TableObject @relation(fields: [table_object_id], references: [id])
  table_object_id BigInt
  purchase        Purchase    @relation(fields: [purchase_id], references: [id])
  purchase_id     BigInt
  created_at      DateTime    @db.Timestamp(6)

  @@map("table_object_purchases")
}

model TableObjectUserAccess {
  id              BigInt      @id @default(autoincrement())
  user            User        @relation(fields: [user_id], references: [id])
  user_id         BigInt
  table_object    TableObject @relation(fields: [table_object_id], references: [id])
  table_object_id BigInt
  table           Table?      @relation(fields: [table_alias], references: [id])
  table_alias     BigInt?
  created_at      DateTime    @db.Timestamp(6)

  @@map("table_object_user_accesses")
}

model TableObject {
  id                         BigInt                  @id @default(autoincrement())
  user                       User                    @relation(fields: [user_id], references: [id])
  user_id                    BigInt
  table                      Table                   @relation(fields: [table_id], references: [id])
  table_id                   BigInt
  uuid                       String?                 @unique(map: "index_table_objects_on_uuid") @db.VarChar
  file                       Boolean?                @default(false)
  etag                       String?                 @db.VarChar
  created_at                 DateTime                @db.Timestamp(6)
  updated_at                 DateTime                @db.Timestamp(6)
  table_object_collections   TableObjectCollection[]
  table_object_prices        TableObjectPrice[]
  table_object_properties    TableObjectProperty[]
  table_object_purchases     TableObjectPurchase[]
  table_object_user_accesses TableObjectUserAccess[]

  @@map("table_objects")
}

model TablePropertyType {
  id        BigInt  @id @default(autoincrement())
  table     Table   @relation(fields: [table_id], references: [id])
  table_id  BigInt
  name      String? @db.VarChar
  data_type Int?    @default(0)

  @@map("table_property_types")
}

model Table {
  id                         BigInt                  @id @default(autoincrement())
  app                        App                     @relation(fields: [app_id], references: [id])
  app_id                     BigInt
  name                       String?                 @db.VarChar
  created_at                 DateTime                @db.Timestamp(6)
  updated_at                 DateTime                @db.Timestamp(6)
  cdn                        Boolean?                @default(false)
  collections                Collection[]
  table_etags                TableEtag[]
  table_object_user_accesses TableObjectUserAccess[]
  table_objects              TableObject[]
  table_property_types       TablePropertyType[]

  @@map("tables")
}

model UserProfileImage {
  id         BigInt   @id @default(autoincrement())
  user       User     @relation(fields: [user_id], references: [id])
  user_id    BigInt
  ext        String?  @db.VarChar
  mime_type  String?  @db.VarChar
  etag       String?  @db.VarChar
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)

  @@map("user_profile_images")
}

model UserSnapshot {
  id                BigInt    @id @default(autoincrement())
  time              DateTime? @db.Timestamp(6)
  daily_active      Int?      @default(0)
  monthly_active    Int?      @default(0)
  yearly_active     Int?      @default(0)
  weekly_active     Int?      @default(0)
  free_plan         Int?      @default(0)
  plus_plan         Int?      @default(0)
  pro_plan          Int?      @default(0)
  email_confirmed   Int?      @default(0)
  email_unconfirmed Int?      @default(0)

  @@map("user_snapshots")
}

model User {
  id                          BigInt                  @id @default(autoincrement())
  email                       String?                 @db.VarChar
  first_name                  String?                 @db.VarChar
  password_digest             String?                 @db.VarChar
  confirmed                   Boolean?                @default(false)
  email_confirmation_token    String?                 @db.VarChar
  password_confirmation_token String?                 @db.VarChar
  old_email                   String?                 @db.VarChar
  new_email                   String?                 @db.VarChar
  new_password                String?                 @db.VarChar
  used_storage                BigInt?                 @default(0)
  last_active                 DateTime?               @db.Timestamp(6)
  stripe_customer_id          String?                 @db.VarChar
  plan                        Int?                    @default(0)
  subscription_status         Int?                    @default(0)
  period_end                  DateTime?               @db.Timestamp(6)
  created_at                  DateTime                @db.Timestamp(6)
  updated_at                  DateTime                @db.Timestamp(6)
  app_users                   AppUser[]
  devs                        Dev[]
  notifications               Notification[]
  providers                   Provider[]
  purchases                   Purchase[]
  sessions                    Session[]
  table_etags                 TableEtag[]
  table_object_user_accesses  TableObjectUserAccess[]
  table_objects               TableObject[]
  user_profile_images         UserProfileImage[]
  websocket_connections       WebsocketConnection[]

  @@map("users")
}

model WebPushSubscription {
  id         BigInt   @id @default(autoincrement())
  session    Session  @relation(fields: [session_id], references: [id])
  session_id BigInt
  uuid       String?  @unique(map: "index_web_push_subscriptions_on_uuid") @db.VarChar
  endpoint   String?
  p256dh     String?  @db.VarChar
  auth       String?  @db.VarChar
  created_at DateTime @db.Timestamp(6)

  @@map("web_push_subscriptions")
}

model WebsocketConnection {
  id         BigInt   @id @default(autoincrement())
  user       User     @relation(fields: [user_id], references: [id])
  user_id    BigInt
  app        App      @relation(fields: [app_id], references: [id])
  app_id     BigInt
  token      String   @db.VarChar
  created_at DateTime @db.Timestamp(6)

  @@map("websocket_connections")
}
